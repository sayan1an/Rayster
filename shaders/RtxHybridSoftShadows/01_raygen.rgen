#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform readonly image2D diffuseImage;
layout(binding = 2, set = 0, rgba8) uniform readonly image2D specularImage;
layout(binding = 3, set = 0, rgba32f) uniform readonly image2D normalImage;
layout(binding = 4, set = 0, rgba32f) uniform readonly image2D otherImage;
layout(binding = 5, set = 0, rgba8) uniform image2D outImage;
layout(binding = 6, set = 0) uniform CameraProperties 
{
	mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;

layout(binding = 7, set = 0) readonly buffer LightVertices { vec4 v[]; } lightVertices;
layout(binding = 8, set = 0) readonly buffer DiscretePdf { float bins[]; } discretePdf;

layout (push_constant) uniform pcBlock {
	vec3 lightPosition;
	float power;
	uint discretePdfSize;
	uint numSamples;
} pcb;

layout(location = 0) rayPayloadNV uint hit;
layout(location = 1) rayPayloadNV vec4 radiance;

const float pi = 3.141592653589793;

uint XorshiftState;

struct XorwowState {
  uint a, b, c, d;
  uint counter;
} xorwowState;

float ggxDist(const vec3 h, const vec3 n, float alpha) {
    float cosine_sq = dot(h, n);
    cosine_sq *= cosine_sq;
    float tan_sq = 1.0f / cosine_sq - 1.0f;
    float alpha_sq = alpha * alpha;

    tan_sq += alpha_sq;
    tan_sq *= tan_sq;
    float D = alpha_sq / (pi * cosine_sq * cosine_sq * tan_sq);

    return D;
}

float ggxG1(const vec3 v, const vec3 h, const vec3 n, float alpha) {
    float cosv_sq = dot(v, n);
    cosv_sq *= cosv_sq;
    float tanv_sq = 1.0f / cosv_sq - 1.0f;

    if (tanv_sq <= 1e-15)
        return 1.0f;
    else if (dot(h, v) <= 1e-15)
        return 0.0f;

    float alpha_sq = alpha * alpha;

    tanv_sq *= alpha_sq;
    tanv_sq += 1.0f;
    tanv_sq = 1.0f + sqrt(tanv_sq);

    return 2.0f/tanv_sq;
}

float ggxBrdf(const vec3 wo, const vec3 wi, const vec3 n, float alpha) {
    vec3 h = normalize(wo + wi);
    
    float D = ggxDist(h, n, alpha);
    float G = ggxG1(wo, h, n, alpha) * ggxG1(wi, h, n, alpha);

    return (D * G) / (4.0f * dot(wo, n));
}

vec4 shadowRayPointLight(vec3 lightPosition, vec3 viewDir, vec3 origin, vec4 surfaceNormal, float bsdfType, vec4 diffRef, vec4 specRef)
{
	float distance = length(lightPosition - origin);
	vec3 lightDir = (lightPosition - origin) / distance;
	
	float cos = dot(lightDir, surfaceNormal.xyz);	
	
	if (cos < 0)
		return vec4(0, 0, 0, 1);

	hit = 0;
	traceNV(topLevelAS, gl_RayFlagsOpaqueNV, gl_RayFlagsTerminateOnFirstHitNV|gl_RayFlagsOpaqueNV|gl_RayFlagsSkipClosestHitShaderNV
		, 0, 0, 0, origin, 0.01f, lightDir, 10000.0f, 0);

	vec4 specularColor = bsdfType > 0.5f ? specRef * ggxBrdf(viewDir, lightDir, surfaceNormal.xyz, surfaceNormal.w) : vec4(0, 0, 0, 1);
	vec4 diffuseColor = diffRef * cos / pi;
		
	return (diffuseColor + specularColor) * hit  / (distance * distance);
}

vec4 shadowRayAreaLight(vec3 lightPosition, vec3 viewDir, vec3 origin, vec4 surfaceNormal, float bsdfType, vec4 diffRef, vec4 specRef)
{
	float distance = length(lightPosition - origin);
	vec3 lightDir = (lightPosition - origin) / distance;
	
	float cos = dot(lightDir, surfaceNormal.xyz);	
	
	if (cos < 0)
		return vec4(0, 0, 0, 1);

	radiance = vec4(-lightDir, 1);
	traceNV(topLevelAS, gl_RayFlagsOpaqueNV, gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV
		, 1, 0, 1, origin, 0.01f, lightDir, 10000.0f, 1);

	vec4 specularColor = bsdfType > 0.5f ? specRef * ggxBrdf(viewDir, lightDir, surfaceNormal.xyz, surfaceNormal.w) : vec4(0, 0, 0, 1);
	vec4 diffuseColor = diffRef * cos / pi;
		
	return (diffuseColor + specularColor) * radiance  / (distance * distance);
}

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint xorshift()
{
	XorshiftState ^= (XorshiftState << 13);
    XorshiftState ^= (XorshiftState >> 17);
    XorshiftState ^= (XorshiftState << 5);

	return XorshiftState;
}

uint xorwow()
{
	uint t = xorwowState.d;

	uint s = xorwowState.a;
	xorwowState.d = xorwowState.c;
	xorwowState.c = xorwowState.b;
	xorwowState.b = s;

	t ^= (t >> 2);
	t ^= (t << 1);
	t ^= (s ^ (s << 4));
	xorwowState.a = t;

	xorwowState.counter += 362437;
	return t + xorwowState.counter;
}

vec3 rand()
{	
	vec3 ret;
	
	ret.x = xorshift() / 4294967296.0;     
    ret.y = xorshift() / 4294967296.0;
	ret.z = xorshift() / 4294967296.0;
	
	/*
	ret.x = xorwow() / 4294967296.0;     
    ret.y = xorwow() / 4294967296.0;
	ret.z = xorwow() / 4294967296.0;
	*/
	return ret;
}

vec3 randomTriplet()
{	
	vec3 triplet = rand();
	
	triplet.y = 1.0 - sqrt(triplet.y);
	triplet.z = (1.0 - triplet.y) * (1.0 - triplet.z);

	return triplet;
}

void main()
{	
	const ivec2 pixel = ivec2(gl_LaunchIDNV.xy);
	const vec4 diffuseColor = imageLoad(diffuseImage, pixel).rgba;
	const vec4 other = imageLoad(otherImage, pixel).rgba;

	vec4 color = vec4(0, 0, 0, 1);
	// If the primary intersection is a light source
	if (other.w > 3.5 && other.w < 4.5)
		color = diffuseColor;
	// primary hit point is valid
	else if (other.w > -0.5f){
		const vec4 specularColor = imageLoad(specularImage, pixel).rgba;
		const vec4 normal = imageLoad(normalImage, pixel).rgba;

		const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
		vec2 d = inUV * 2.0 - 1.0;

		vec4 origin = cam.viewInv * vec4(0,0,0,1);
		vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1) ;
		vec4 viewDir = cam.viewInv * vec4(normalize(target.xyz), 0) ;
	
		// for shadow rays
		origin = origin + (other.x - 0.05f) * viewDir;
		color = shadowRayPointLight(pcb.lightPosition, -viewDir.xyz, origin.xyz, normal, other.w, diffuseColor, specularColor);

		XorshiftState = wang_hash(pixel.x * 5000 + pixel.y);
		/*
		xorwowState.a = wang_hash(pixel.x * 5000 + pixel.y);
		xorwowState.b = wang_hash(pixel.x * 5000 + pixel.y + 1);
		xorwowState.c = wang_hash(pixel.x * 5000 + pixel.y + 2);
		xorwowState.d = wang_hash(pixel.x * 5000 + pixel.y + 3);
		xorwowState.counter = wang_hash(pixel.x * 5000 + pixel.y + 4);
		*/
		for (uint i = 0; i < pcb.numSamples; i++) {
			vec3 randTrip = randomTriplet();
			uint index = 0;
			// This is ridiculus, TODO:: find better solution
			for (uint j = 0; j < pcb.discretePdfSize; j++)
				index = discretePdf.bins[j] < randTrip.x ? j : index; 
			
			color += shadowRayAreaLight((lightVertices.v[3*index] * randTrip.y + lightVertices.v[3*index + 1] * randTrip.z + lightVertices.v[3*index + 2] * (1 - randTrip.y - randTrip.z)).xyz,
				-viewDir.xyz, origin.xyz, normal, other.w, diffuseColor, specularColor) / ((discretePdf.bins[index + 1] - discretePdf.bins[index]) * pcb.numSamples);

		}

		color *= pcb.power;
	}

	imageStore(outImage, pixel, color);
}
