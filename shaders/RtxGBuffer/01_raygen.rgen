#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "../hostDeviceShared.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D imageDiffuse;
layout(binding = 2, set = 0, rgba8) uniform image2D imageSpecular;
layout(binding = 3, set = 0, rgba32f) uniform image2D imageNormal;
layout(binding = 4, set = 0, rgba32f) uniform image2D imageOther;
layout(binding = 5, set = 0) uniform CameraProperties 
{
	VIEWPROJ_BLOCK
} cam;

layout(location = 0) rayPayloadNV Payload {
	vec4 diffuseColor;
	vec4 specularColor;
	vec4 normal; // normla + specular alpha
	vec4 other; // depth, int ior, ext ior, material type
} payload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInv * vec4(0,0,0,1);
	vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInv * vec4(normalize(target.xyz), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	
	imageStore(imageDiffuse, ivec2(gl_LaunchIDNV.xy), payload.diffuseColor);
	imageStore(imageSpecular, ivec2(gl_LaunchIDNV.xy), payload.specularColor);
	imageStore(imageNormal, ivec2(gl_LaunchIDNV.xy), payload.normal);
	imageStore(imageOther, ivec2(gl_LaunchIDNV.xy), payload.other);
	
	//imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(abs(d.x), abs(d.y), 0.0, 0.0));
}
