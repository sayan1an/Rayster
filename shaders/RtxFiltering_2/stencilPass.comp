#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba32f) uniform readonly image2D inNormal;
layout (binding = 1, rgba16f) uniform image2D outStencil;
layout (binding = 2, rgba16f) uniform image2D outStencil2;
layout (binding = 3, rgba16f) uniform image2D outStencil3;

shared vec4 sMean[8][8];
shared vec4 sVar[8][8];

void meanVar(in vec4 n00, in vec4 n01, in vec4 n10, in vec4 n11, out vec4 mean, out vec4 var)
{
	mean = (n00 + n01 + n10 + n11) / 4.0f;
	var = (n00 - mean) * (n00 - mean) + (n01 - mean) * (n01 - mean) + (n10 - mean) * (n10 - mean) + (n11 - mean) * (n11 - mean);
	var = var / 4.0f;
}

vec2 var2Std(in vec4 var, in vec4 mean)
{
	return vec2(sqrt(var.x + var.y + var.z), sqrt(var.w) / (mean.w  + 0.0000001));
}

void meanVarShared(ivec2 block, out vec4 mean, out vec4 var)
{
	vec4 m00 = sMean[2*block.y][2*block.x];
	vec4 m01 = sMean[2*block.y][2*block.x + 1];
	vec4 m10 = sMean[2*block.y + 1][2*block.x];
	vec4 m11 = sMean[2*block.y + 1][2*block.x + 1];

	vec4 v00 = sVar[2*block.y][2*block.x];
	vec4 v01 = sVar[2*block.y][2*block.x + 1];
	vec4 v10 = sVar[2*block.y + 1][2*block.x];
	vec4 v11 = sVar[2*block.y + 1][2*block.x + 1];

	mean = (m00 + m11 + m10 + m11) / 4.0f;
	//https://www.emathzone.com/tutorials/basic-statistics/combined-variance.html
	var = v00 + v01 + v10 + v11 + (m00 - mean) * (m00 - mean) + (m01 - mean) * (m01 - mean) + (m10 - mean) * (m10 - mean) + (m11 - mean) * (m11 - mean);
	var = var / 4.0f;
}

void main()
{	
	ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	vec4 n00 = imageLoad(inNormal, pixel * 2).rgba;
	vec4 n01 = imageLoad(inNormal, pixel * 2 + ivec2(0,1)).rgba;
	vec4 n10 = imageLoad(inNormal, pixel * 2 + ivec2(1,0)).rgba;
	vec4 n11 = imageLoad(inNormal, pixel * 2 + ivec2(1,1)).rgba;

	vec4 mean, var;
	meanVar(n00, n01, n10, n11, mean, var);

	uint tx = gl_LocalInvocationID.x;
	uint ty = gl_LocalInvocationID.y;
	sMean[ty][tx] = mean;
	sVar[ty][tx] = var;
	
	imageStore(outStencil, pixel, vec4(var2Std(var, mean), 0, 0));

	memoryBarrierShared();
	barrier();

	if (tx < 4 && ty < 4) {
		meanVarShared(ivec2(tx,ty), mean, var);
		sMean[ty][tx] = mean;
		sVar[ty][tx] = var;

		imageStore(outStencil2, 4 * ivec2(gl_WorkGroupID.xy) + ivec2(tx, ty), vec4(var2Std(var, mean), 0, 0));
	}

	memoryBarrierShared();
	barrier();

	if (tx < 2 && ty < 2) {
		meanVarShared(ivec2(tx,ty), mean, var);
		sMean[ty][tx] = mean;
		sVar[ty][tx] = var;

		imageStore(outStencil3, 2 * ivec2(gl_WorkGroupID.xy) + ivec2(tx, ty), vec4(var2Std(var, mean), 0, 0));
	}
}