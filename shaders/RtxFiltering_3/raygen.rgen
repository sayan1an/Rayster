#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "../commonMath.h"
#include "hostDeviceShared.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV tlas_global;
layout(binding = 1, set = 0) uniform accelerationStructureNV tlas_lightSource;
layout(binding = 2, set = 0, rgba32f) uniform readonly image2D normalImage;
layout(binding = 3, set = 0, rgba16f) uniform readonly image2D otherImage;
layout(binding = 4, set = 0, rgba16f) uniform readonly image2D stencilImage;
layout(binding = 5, set = 0, rg16f) uniform readonly image2DArray outSampleStat;
layout(binding = 6, set = 0) uniform GaussHermitWeights 
{
	vec4 weights[150];
} gaussHermitWeights;
layout(binding = 7, set = 0, rgba32f) uniform image2DArray outImage;
layout(binding = 8, set = 0) uniform CameraProperties 
{
	mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;

layout(binding = 9, set = 0) readonly buffer LightVertices { vec4 v[]; } lightVertices;
layout(binding = 10, set = 0) readonly buffer DiscretePdf { float bins[]; } discretePdf;
layout(binding = 11, set = 0) readonly buffer UniformToEmitterIdx { uint bins[]; } uniformToEmitterIdx;
layout(binding = 12, set = 0) buffer RandomGeneratorState { uint state[]; } randGenState;

#if COLLECT_RT_SAMPLES
layout(binding = 19, set = 0) buffer CollectRTSample { vec4 state[]; } collectRTSample;
#endif

layout (push_constant) uniform pcBlock {
	uint uniformToEmitterIndexMapSize;
	uint numSamples;
	uint level;
	uint random;
#if COLLECT_RT_SAMPLES
	uint pixelQueryX;
	uint pixelQueryY;
#endif
} pcb;

layout(location = 0) rayPayloadNV vec3 radiance;

uint xorshiftState;

vec2 rand2(inout uint xorshiftState)
{	
	vec2 ret;
	
	ret.x = xorshift(xorshiftState) / 4294967296.0;     
    ret.y = xorshift(xorshiftState) / 4294967296.0;

	return ret;
}

void shadowRayAreaLight(in vec3 lightPosition, in vec3 viewDir, in vec3 origin, in vec3 surfaceNormal, in float bsdfType, in float specularAlpha, out vec3 diffComp, out vec3 specComp, out float lightHit)
{	
	diffComp = vec3(0);
	specComp = vec3(0);
	lightHit = 1;

	float distance = length(lightPosition - origin);
	vec3 lightDir = (lightPosition - origin) / distance; // for testing (Mirror):2 * dot(surfaceNormal, viewDir) * surfaceNormal - viewDir;
	
	float cos = dot(lightDir, surfaceNormal);
	
	if (cos < 0) return;
	
	radiance = -lightDir;
	
	traceNV(tlas_global, gl_RayFlagsOpaqueNV, gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV , 1, 0, 0, origin, 0.01f, lightDir, 10000.0f, 0);
	//traceNV(tlas_lightSource, gl_RayFlagsOpaqueNV, gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV, 0, 0, 0, origin, 0.01f, lightDir, 10000.0f, 0);
	
	lightHit = radiance.x + radiance.y + radiance.z > 0 ? 1 : 0;
	radiance /= (distance * distance);
	specComp = bsdfType > 0.5f ? radiance * ggxBrdf(viewDir, lightDir, surfaceNormal, specularAlpha) : vec3(0);
	diffComp = radiance * cos / PI;
}

void main()
{	
	const ivec2 pixel = ivec2(gl_LaunchIDNV.xy);
	float lightPercent = 0;
	vec3 diffComp = vec3(0);
	vec3 specComp = vec3(0);
	float alpha = 0;
	vec4 stencil = imageLoad(stencilImage, pixel / 2);
	
	if (stencil.w > 0.5 && stencil.w < 1.5)
	{	
		alpha = 1;
	
		xorshiftState = randGenState.state[pixel.y * gl_LaunchSizeNV.x + pixel.x];
		const vec4 other = imageLoad(otherImage, pixel).rgba;
		const vec4 normalDepth = imageLoad(normalImage, pixel).rgba;

#if COLLECT_RT_SAMPLES
        if (pcb.pixelQueryX == pixel.x && pcb.pixelQueryY == pixel.y) {
            collectRTSample.state[0].x = RT_SAMPLE_HEADER_SIZE + 0.01f;
            collectRTSample.state[0].y = 0;
        }
#endif

		// If the primary intersection is a light source
		if (other.w > 3.5 && other.w < 4.5) 
			diffComp = vec3(1.0);
					
		// primary hit point is valid
		else if (other.w > -0.5f) {
			vec2 offset = vec2(offsetCalc(pixel.x & 1, pcb.level), offsetCalc(pixel.y & 1, pcb.level));
			const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + offset;
			const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
			vec2 d = inUV * 2.0 - 1.0;

			vec4 origin = cam.viewInv * vec4(0,0,0,1);
			vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1) ;
			vec4 viewDir = cam.viewInv * vec4(normalize(target.xyz), 0) ;
		
			// for shadow rays
			origin = origin + (normalDepth.w - 0.000f) * viewDir;
			
			vec3 spec, diff;
			float lightHit, a, b, pdf;

			int stride = int(pow(2, pcb.level) + 0.1);
			uint sampleUsed = 0;
			for (uint i = 0; i < (MAX_SPP / (2*stride)); i++)
			for (int y = -stride; y <= stride; y++) {
				int py = pixel.y * stride + y;
            for (int x = -stride; x <= stride; x++) {
				int px = pixel.x * stride + x;
				bool useMcmc = (pcb.random < 1) && (py >= 0) && (py < (gl_LaunchSizeNV.y * stride)) && (px > 0) && (px < (gl_LaunchSizeNV.x * stride));
				vec2 uv =  useMcmc ? imageLoad(outSampleStat, ivec3(px, py, i & (MAX_SPP - 1))).rg : rand2(xorshiftState);
#if COLLECT_RT_SAMPLES
				if (pcb.pixelQueryX == pixel.x && pcb.pixelQueryY == pixel.y) {
					uint index = uint(collectRTSample.state[0].y);
					collectRTSample.state[RT_SAMPLE_HEADER_SIZE + index].xy = vec2(uv.x, uv.y);
					collectRTSample.state[0].y = index + 1.0001; 
				}
#endif
				uint index = uniformToEmitterIdx.bins[uint(uv.x * pcb.uniformToEmitterIndexMapSize)];
				a = discretePdf.bins[index + 1];
				b = discretePdf.bins[index];
				pdf = a - b; 
				uv.x = (uv.x - b) / pdf; // rescale

				// convert to bary
				uv.x = 1.0 - sqrt(uv.x);
				uv.y = (1.0 - uv.x) * (1.0 - uv.y);
				
				shadowRayAreaLight((lightVertices.v[3*index] * uv.x + lightVertices.v[3*index + 1] * uv.y + lightVertices.v[3*index + 2] * (1 - uv.x - uv.y)).xyz,
					-viewDir.xyz, origin.xyz, normalDepth.xyz, other.w, other.x, diff, spec, lightHit);

				diffComp += (diff / pdf);
				specComp += (spec / pdf);

				lightPercent += lightHit;
				sampleUsed++;
			}
			}

			diffComp /= float(sampleUsed);
			specComp /=  float(sampleUsed);
			lightPercent /= float(sampleUsed);
		}

#if COLLECT_RT_SAMPLES
        if (pcb.pixelQueryX == pixel.x && pcb.pixelQueryY == pixel.y) {         
           diffComp = vec3(-1);
        }
#endif    
				
		randGenState.state[pixel.y * gl_LaunchSizeNV.x + pixel.x] = xorshiftState;
	}

	imageStore(outImage, ivec3(pixel, 0), vec4(diffComp, alpha));
	imageStore(outImage, ivec3(pixel, 1), vec4(specComp, lightPercent));
}
