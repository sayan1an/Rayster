#version 450
#extension GL_GOOGLE_include_directive : enable

#include "hostDeviceShared.h"

layout (local_size_x = COMPUTE_BLENDE_WEIGHT_WORKGROUP_SIZE, local_size_y = COMPUTE_BLENDE_WEIGHT_WORKGROUP_SIZE) in;

layout(binding = 0, rgba32f) uniform readonly image2D normalImage;
layout(binding = 1, rgba16f) uniform readonly image2D otherImage;
layout(binding = 2, rg16f) uniform readonly image2D motionVectorImage;
layout(binding = 3, rg32f) uniform readonly image2DArray mcState;
layout(binding = 4) readonly buffer UniformToEmitterIdx { uint bins[]; } uniformToEmitterIdx;
layout(binding = 5) readonly buffer LightVertices { vec4 v[]; } lightVertices;
layout(binding = 6, rgba16f) uniform image2D blendeWeightImage;

layout (push_constant) uniform pcBlock {
    float maxN;
} pcb;

void main()
{   
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    
    ivec2 viewportSize = imageSize(motionVectorImage);
    const vec4 normal = imageLoad(normalImage, pixel).rgba;
    const vec4 other = imageLoad(otherImage, pixel).rgba;
    const vec2 pixelMotion = clamp(pixel + vec2(0.5) + imageLoad(motionVectorImage, pixel).rg, vec2(0), viewportSize);
    const vec2 weightValOld = imageLoad(blendeWeightImage, ivec2(pixelMotion)).rg;

    vec2 weightVal = vec2(0.0);

    if (other.w > -0.5 && other.w < 3.5) {
        vec3 t = abs(normal.xyz);
        weightVal.y = t.x + t.y + t.z; 
        float delta = abs(weightValOld.y - weightVal.y);
        float N = weightValOld.x / (1 - weightValOld.x);
        N += (delta < 0.001) ? (1 - delta) : (-N / 5.0);
        N = clamp(N, 0, pcb.maxN);
        weightVal.x = N / (N + 1);
    }

    imageStore(blendeWeightImage, pixel, vec4(weightVal.x, weightVal.y, 0, 0));
}