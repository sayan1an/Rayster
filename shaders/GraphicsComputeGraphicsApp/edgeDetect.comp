#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inDiffuseColor;
layout (binding = 1, rgba8) uniform readonly image2D inSpecularColor;
layout (binding = 2, rgba32f) uniform readonly image2D inNormal;
layout (binding = 3, rgba32f) uniform readonly image2D inDepthMatInfo;

layout (binding = 4, rgba8) uniform image2D resultImage;

layout (push_constant) uniform pcBlock {
	uint select;
	float scale;
} pcb;

float conv(in float[9] kernel, in float[9] data, in float denom, in float offset) 
{
   float res = 0.0;
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return clamp(res/denom + offset, 0.0, 1.0);
}

struct ImageData 
{
	float r[9];
	float g[9];
	float b[9];
} imageData;	

void main()
{
	
	// Fetch neighbouring texels
	int n = -1;
	for (int i=-1; i<2; ++i) 
	{   
		for(int j=-1; j<2; ++j) 
		{    
			n++;
			ivec2 location = ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j);
			vec4 rgba;
			if (pcb.select == 0)
				rgba  = imageLoad(inDiffuseColor, location).rgba;
			else if (pcb.select == 1)
				rgba  = imageLoad(inSpecularColor, location).rgba;
			else if (pcb.select == 2 || pcb.select == 6)
				rgba  = imageLoad(inNormal, location).rgba;
			else if (pcb.select == 3 || pcb.select == 4 || pcb.select == 5 || pcb.select == 7)
				rgba  = imageLoad(inDepthMatInfo, location).rgba;
			else
				rgba = vec4(1.0f);
			
			rgba *= pcb.scale;

			if (pcb.select == 6 || pcb.select == 7)
				rgba.r = rgba.g = rgba.b = rgba.a; // for specular alpha and bsdf type
			if (pcb.select == 3)
				rgba.g = rgba.b = rgba.r; // for depth
			if (pcb.select == 4)
				rgba.r = rgba.b = rgba.g; // for int ior
			if (pcb.select == 5)
				rgba.r = rgba.g = rgba.b; // for ext ior

			imageData.r[n] = rgba.r;
			imageData.g[n] = rgba.g;
			imageData.b[n] = rgba.b;
		}
	}

	float[9] kernel;
	kernel[0] = -1.0; kernel[1] = -1.0; kernel[2] = -1.0;
	kernel[3] = -1.0; kernel[4] =  9.0; kernel[5] = -1.0;
	kernel[6] = -1.0; kernel[7] = -1.0; kernel[8] = -1.0;
								
	vec4 res = vec4(
		conv(kernel, imageData.r, 1.0, 0.0), 
		conv(kernel, imageData.g, 1.0, 0.0), 
		conv(kernel, imageData.b, 1.0, 0.0),
		1.0);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}