#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "../../commonMath.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform readonly image2D diffuseImage;
layout(binding = 2, set = 0, rgba8) uniform readonly image2D specularImage;
layout(binding = 3, set = 0, rgba32f) uniform readonly image2D normalImage;
layout(binding = 4, set = 0, rgba32f) uniform readonly image2D otherImage;
layout(binding = 5, set = 0, rgba32f) uniform image2D outImage;
layout(binding = 6, set = 0) uniform CameraProperties 
{
	mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;
layout(binding = 7, set = 0) readonly buffer SamplePatternSphericalCoord { vec2 v[]; } samplePatternSpCoord;
layout(binding = 8, set = 0) readonly buffer SamplePatternCartesianCoord { vec4 v[]; } samplePatternCartCoord;
layout(binding = 9, set = 0) buffer SampleFeedback { uint v[]; } sampleFeedback;
layout(binding = 10, set = 0) buffer EmitterBoundSp { vec4 v[]; } emitterBoundSp;
layout(binding = 11, set = 0) readonly buffer LightVertices { vec4 v[]; } lightVertices;

layout (push_constant) uniform pcBlock {
	float power;
	uint collectData;
	uint pixelInfo;
	uint nTriSources;
} pcb;

layout(location = 0) rayPayloadNV vec3 radiance;

vec3 shadowRayAreaLight(in float cosIncident, in vec3 lightDir, in vec3 viewDir, in vec3 origin, in vec4 surfaceNormal, in float bsdfType, in vec3 diffRef, in vec3 specRef)
{	
	traceNV(topLevelAS, gl_RayFlagsOpaqueNV, gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV
		, 0, 0, 0, origin, 0.01f, lightDir, 10000.0f, 0);

	vec3 specularColor = bsdfType > 0.5f ? specRef *  ggxBrdf(viewDir, lightDir, surfaceNormal.xyz, surfaceNormal.w) : vec3(0, 0, 0);
	vec3 diffuseColor = diffRef * cosIncident / PI;
		
	return (diffuseColor + specularColor) * radiance;
}

void main()
{	
	const ivec2 pixel = ivec2(gl_LaunchIDNV.xy);
	if (pixel.x == 0 && pixel.y == 0) {
		for (uint i = 0; i < pcb.nTriSources; i++)
			emitterBoundSp.v[i] = boundingSphereTri(lightVertices.v[3*i].xyz, lightVertices.v[3*i + 1].xyz, lightVertices.v[3*i + 2].xyz);
	}
	memoryBarrierBuffer();
	//barrier();

	const uint px = pcb.pixelInfo & 0xffff;
	const uint py = pcb.pixelInfo >> 16;
	const uint nSamples = uint(samplePatternCartCoord.v[0].w);
	

	if (pcb.collectData > 0 && pixel.x == px && pixel.y == py)
		for (uint i = 0; i < nSamples; i++)
			sampleFeedback.v[i] = 0;
	
	const vec4 diffuseColor = imageLoad(diffuseImage, pixel).rgba;
	const vec4 other = imageLoad(otherImage, pixel).rgba;

	vec4 color = vec4(0, 0, 0, 1);
	// If the primary intersection is a light source
	if (other.w > 3.5 && other.w < 4.5)
		color = diffuseColor;
	// primary hit point is valid
	else if (other.w > -0.5f){
		const vec4 specularColor = imageLoad(specularImage, pixel).rgba;
		const vec4 normal = imageLoad(normalImage, pixel).rgba;

		const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
		vec2 d = inUV * 2.0 - 1.0;

		vec4 origin = cam.viewInv * vec4(0,0,0,1);
		vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1) ;
		vec4 viewDir = cam.viewInv * vec4(normalize(target.xyz), 0) ;
	
		// for shadow rays
		origin = origin + (other.x - 0.000f) * viewDir;
		
		for (uint i = 0; i < nSamples; i++) {
			vec3 lightDir = samplePatternCartCoord.v[i].xyz;
			float cos = dot(lightDir, normal.xyz);	
			uint raytrace = cos > 0 ? 1 : 0;
			vec3 sampleValue = vec3(0);
			if (raytrace > 0) {
				/*raytrace = 0;
				for (uint j = 0; j < pcb.nTriSources; j++) {
					vec3 centerline = emitterBoundSp.v[j].xyz - origin.xyz;
					float len = length(centerline);
					centerline /= len;
					if (dot(centerline, lightDir) < emitterBoundSp.v[j].w / len) {
						raytrace = 1;
						break;
					}
				}*/

				if (raytrace > 0) {
					sampleValue = shadowRayAreaLight(cos, lightDir, -viewDir.xyz, origin.xyz, normal, other.w, diffuseColor.xyz, specularColor.xyz) * 4 * PI /  nSamples;
					color.xyz += sampleValue;
				}
			}

			if (pcb.collectData > 0 && pixel.x == px && pixel.y == py)
				sampleFeedback.v[i] = max(dot(sampleValue, sampleValue) > 0 ? 3 : 0, raytrace);
		}
		
		color *= pcb.power;
	}

	if (pcb.collectData > 0 && pixel.x >= px - 2 && pixel.x <= px + 2 && pixel.y >= py - 2 && pixel.y <= py + 2)
		color = vec4(0, 1, 0, 1); 

	imageStore(outImage, pixel, color);
}