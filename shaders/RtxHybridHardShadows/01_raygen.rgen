#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "../commonMath.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform readonly image2D diffuseImage;
layout(binding = 2, set = 0, rgba8) uniform readonly image2D specularImage;
layout(binding = 3, set = 0, rgba32f) uniform readonly image2D normalImage;
layout(binding = 4, set = 0, rgba32f) uniform readonly image2D otherImage;
layout(binding = 5, set = 0, rgba8) uniform image2D outImage;
layout(binding = 6, set = 0) uniform CameraProperties 
{
	mat4 view;
    mat4 proj;
    mat4 viewInv;
    mat4 projInv;
} cam;

layout (push_constant) uniform pcBlock {
	vec3 lightPosition;
	float power;
} pcb;

layout(location = 0) rayPayloadNV uint hit;

void main() 
{	
	const ivec2 pixel = ivec2(gl_LaunchIDNV.xy);
	const vec4 other = imageLoad(otherImage, pixel).rgba;
	vec4 color = vec4(0, 0, 0, 1);

	if (other.w > -0.5) {
		const vec4 diffuseColor = imageLoad(diffuseImage, pixel).rgba;
		const vec4 specularColor = imageLoad(specularImage, pixel).rgba;
		const vec4 normal = imageLoad(normalImage, pixel).rgba;

		const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
		vec2 d = inUV * 2.0 - 1.0;

		
		vec4 origin = cam.viewInv * vec4(0,0,0,1);
		vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1) ;
		vec4 viewDir = cam.viewInv * vec4(normalize(target.xyz), 0) ;
		
		//vec4 origin = cam.viewInv * cam.projInv * vec4(0,0,-0.1,0);
		//vec4 viewDir = normalize(cam.viewInv * cam.projInv * vec4(d.x, d.y, 1, 1));

		// for shadow rays
		origin = origin + (other.x - 0.001f) * viewDir;
		vec4 lightPosition = vec4(pcb.lightPosition, 0);
		float distance = length(lightPosition.xyz - origin.xyz);
		vec4 lightDir = (lightPosition - origin) / distance;
	
		float cos = dot(lightDir.xyz, normal.xyz);	
	
		if (cos > 0) {
			hit = 0;
			traceNV(topLevelAS, gl_RayFlagsOpaqueNV, gl_RayFlagsTerminateOnFirstHitNV|gl_RayFlagsOpaqueNV|gl_RayFlagsSkipClosestHitShaderNV
				, 0, 0, 0, origin.xyz, 0.01f, lightDir.xyz, 10000.0f, 0);

			vec4 specularColor = other.w > 0.5f ? specularColor * ggxBrdf(-viewDir.xyz, lightDir.xyz, normal.xyz, normal.w) : vec4(0, 0, 0, 1);
			vec4 diffuseColor = diffuseColor * cos / PI;
		
			color = pcb.power * (diffuseColor + specularColor) * hit  / (distance * distance);
		}
	}
	imageStore(outImage, pixel, color);
}
