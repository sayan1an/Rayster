#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "../commonMath.h"
#include "../hostDeviceShared.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D imageOut;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	VIEWPROJ_BLOCK
} cam;

layout(location = 0) rayPayloadNV Payload {
	vec4 diffuseColor;
	vec4 specularColor;
	vec4 normal; // normla + specular alpha
	vec4 other; // depth, int ior, ext ior, material type
} payload;

layout(location = 1) rayPayloadNV PayloadShadow {
	uint hit;
} payloadShadow;

layout (push_constant) uniform pcBlock {
	vec3 lightPosition;
	float power;
} pcb;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInv * vec4(0,0,0,1);
	vec4 target = cam.projInv * vec4(d.x, d.y, 1, 1) ;
	vec4 viewDir = cam.viewInv * vec4(normalize(target.xyz), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;
	payload.other.w = -1;

	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, viewDir.xyz, tmax, 0);
	vec4 color = vec4(0, 0, 0, 1);

	// for shadow rays
	if (payload.other.w > -0.5) {
		origin = origin + (payload.other.x - 0.05f) * viewDir;
		vec4 lightPosition = vec4(pcb.lightPosition, 0);
		float distance = length(lightPosition.xyz - origin.xyz);
		vec4 lightDir = (lightPosition - origin) / distance;
	
		float cos = dot(lightDir.xyz, payload.normal.xyz);
		
		if (cos > 0) {
			payloadShadow.hit = 0;
			traceNV(topLevelAS, rayFlags, gl_RayFlagsTerminateOnFirstHitNV|gl_RayFlagsOpaqueNV|gl_RayFlagsSkipClosestHitShaderNV
				, 1, 0, 1, origin.xyz, tmin, lightDir.xyz, tmax, 1);

			vec4 specularColor = payload.other.w > 0.5f ? payload.specularColor * ggxBrdf(-viewDir.xyz, lightDir.xyz, payload.normal.xyz, payload.normal.w) : vec4(0, 0, 0, 1);
			vec4 diffuseColor = payload.diffuseColor * cos / PI;
		
			color = pcb.power * (diffuseColor + specularColor) * payloadShadow.hit  / (distance * distance);
		}
	}
	imageStore(imageOut, ivec2(gl_LaunchIDNV.xy), color);
}
